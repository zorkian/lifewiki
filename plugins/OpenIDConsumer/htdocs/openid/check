<%perl>

    my $verify = sub {
        my $args = $m->request_args;

        if ($args->{assoc}) {
            return LifeWiki::error("you wanted to associate an identity but you are no longer logged in")
                unless $remote;
            my $rv = LifeWiki::Plugin::OpenIDConsumer::tryAssociate($remote, $args);
            if (ref $rv eq 'HASH') {
                if ($rv->{success}) {
                    print "<p>Your identity ($rv->{url}) has been associated with the logged in account.</p>";
                    return 1;
                } else {
                    return LifeWiki::error('invalid hash from tryAssociate');
                }
            } elsif ($rv) {
                # setup redirect
                $m->redirect($rv);
                return 1;
            } else {
                return 0;
            }
        }

        my $data = LifeWiki::Plugin::OpenIDConsumer::tryVerify($args);
        if (ref $data eq 'HASH') {
            # got a user data structure back; log this person in
            my $u = LifeWiki::User->newFromExternal($data->{external});
            unless (defined $u) {
                $u = LifeWiki::User->createAccount(
                    external => $data->{external},
                    username => undef,
                    password => undef,
                    nickname => $data->{nick},
                    email => undef,
                );
                return LifeWiki::error("unable to access your account; please try again later.")
                    unless defined $u;
            }

            # must be good
            my $sess = $u->generateSession;
            return LifeWiki::error("unable to generate session")
                unless $sess;
            my $c = Apache::Cookie->new($r,
                -name => 'session',
                -value => $u->getUserid . ":" . $sess . ":",
                -domain => $LifeWiki::DOMAIN,
                -expires => '+1d',
            );
            $c->bake;

            # ghetto?
            $remote = $u;

            # redirect to preferences page
            unless ($u->getUsername) {
                $m->redirect("$LifeWiki::SITEROOT/prefs");
            } else {
                print "<p>You have been logged in.</p>";
            }
            return 1;

        } elsif ($data) {
            # got a redirect URL (true but not hash)
            $m->redirect($data);
            return 1;
        } else {
            return LifeWiki::error("failed verification");
        }
    };

    return if $verify->();

</%perl>

% LifeWiki::printErrors();

<p>If you see this, something got boned.  Sorry.</p>
